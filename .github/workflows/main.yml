name: Main Branch

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      deployments: write
    environment:
      name: prod
      url: https://${{ vars.APP_DOMAIN }}
    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push production image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/threads-bot-api:latest
            ghcr.io/${{ github.repository }}/threads-bot-api:${{ github.sha }}

      - name: Deploy to production
        uses: appleboy/ssh-action@v1.0.0
        env:
          DEPLOY_IMAGE: ghcr.io/${{ github.repository }}/threads-bot-api:${{ github.sha }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 391
          envs: DEPLOY_IMAGE,GITHUB_REPOSITORY
          debug: true
          script: |
            # Switch to bash
            /bin/bash -c '
            echo "Starting deployment..."
            
            # Stop all running containers first
            docker compose down || true
            docker rm -f $(docker ps -aq) || true
            
            # Create docker-compose.yml with explicit repository name
            cat > docker-compose.yml << "EOF"
            services:
              api:
                image: ghcr.io/'$GITHUB_REPOSITORY'/threads-bot-api:${IMAGE_TAG:-latest}
                restart: unless-stopped
                ports:
                  - "3000:3000"
                environment:
                  - NODE_ENV=production
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
            EOF
            
            echo "Pulling image: $DEPLOY_IMAGE"
            docker pull "$DEPLOY_IMAGE"
            
            # Extract SHA from DEPLOY_IMAGE
            SHA=$(echo "$DEPLOY_IMAGE" | cut -d: -f2)
            IMAGE_TAG=$SHA docker compose up -d
            
            # Wait for container health in bash
            for i in $(seq 1 30); do
              if docker compose ps | grep "(healthy)"; then
                echo "Container is healthy"
                exit 0
              fi
              if [ "$i" -eq 30 ]; then
                echo "Container failed to become healthy"
                exit 1
              fi
              sleep 1
            done
            '

      - name: Smoke test
        run: |
          sleep 5  # Reduced wait time since we're already checking health
          curl -sSf -k "http://localhost:3000/health" || (echo "Health check failed"; exit 1)

      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 391
          script: |
            docker compose down
            IMAGE_TAG=latest docker compose up -d